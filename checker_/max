./libft/srcs/sort/stack.c:	while (++i < a->lenght)
./libft/srcs/sort/stack.c:		sum += a->stack[i];
./libft/srcs/sort/stack.c:	a->mid = sum / a->lenght;
./libft/srcs/sort/stack.c:	while (++i < a->lenght)
./libft/srcs/sort/stack.c:		if (a->stack[i - 1] > a->stack[i])
./libft/srcs/sort/stack.c:	while (++i < a->lenght)
./libft/srcs/sort/stack.c:		if (a->stack[i - 1] > a->stack[i])
./libft/srcs/sort/quicksort.c:		while (a->stack[left] < pivot)
./libft/srcs/sort/quicksort.c:		while (a->stack[right] > pivot)
./libft/srcs/sort/quicksort.c:	pivot = a->stack[(left + right) / 2];
./libft/srcs/sort/quicksort.c:	quicksort(a, 0, a->lenght - 1);
./libft/srcs/sort/insertsort.c:	while (i < a->lenght)
./libft/srcs/sort/insertsort.c:		item_to_insert = a->stack[i];
./libft/srcs/sort/insertsort.c:		while (j >= 0 && a->stack[j] > item_to_insert)
./libft/srcs/sort/insertsort.c:			a->stack[j + 1] = a->stack[j];
./libft/srcs/sort/insertsort.c:		a->stack[j + 1] = item_to_insert;
./libft/srcs/sort/heapsort.c:	if (left_child < heap_size && a->stack[left_child] > a->stack[largest])
./libft/srcs/sort/heapsort.c:	if (right_child < heap_size && a->stack[right_child] > a->stack[largest])
./libft/srcs/sort/heapsort.c:	i = a->lenght - 1;
./libft/srcs/sort/heapsort.c:		heapify(a, a->lenght, i--);
./libft/srcs/sort/heapsort.c:	i = a->lenght - 1;
./libft/srcs/sort/mergesort.c:			((end > last) || (a->stack[start] < a->stack[end])))
./libft/srcs/sort/mergesort.c:			buf->stack[i] = a->stack[start++];
./libft/srcs/sort/mergesort.c:			buf->stack[i] = a->stack[end++];
./libft/srcs/sort/mergesort.c:		a->stack[i] = buf->stack[i];
./libft/srcs/sort/mergesort.c:	buf = stack_init(0, a->lenght, 0, 0);
./libft/srcs/sort/mergesort.c:	mergesort_(a, buf, 0, a->lenght - 1);
./libft/srcs/sort/selectionsort.c:	while (i < a->lenght)
./libft/srcs/sort/selectionsort.c:		lowest_value_index = a->stack[i];
./libft/srcs/sort/selectionsort.c:		while (++j < a->lenght)
./libft/srcs/sort/selectionsort.c:			if (a->stack[j] < a->stack[lowest_value_index])
./libft/srcs/other/find_min.c:	return (index_min_(a->stack, a->lenght));
./libft/srcs/other/find_min.c:	return (find_min_(a->stack, a->lenght));
./libft/srcs/other/find_max.c:	return (index_max_(a->stack, a->lenght));
./libft/srcs/other/find_max.c:	return (find_max_(a->stack, a->lenght));
./src/checker.c:	while (++i < a->lenght)
./src/checker.c:		if (a->stack[i - 1] > a->stack[i])
./src/read.c:	if (duplicates(a->stack, a->lenght))
./src/read.c:	a->min = find_min(a);
./src/read.c:	a->max = find_max(a);
./src/visualize.c:		if (a->id == 'b')
./src/visualize.c:	i = FT_MAX(a->lenght, b->lenght) - 1;
./src/visualize.c:		if (i < a->lenght)
./src/visualize.c:			print_value(fdf, a, a->stack[i], a->lenght - i - 1);
./src/visualize.c:	fdf->zoom_x = (WIDTH / 2) / a->max;	
./src/visualize.c:	fdf->zoom_y = HEIGHT / a->lenght;
./src/main.c:		b = stack_init('b', 0, 0, a->debug);
./src/main.c:		if (a->debug == 2)
./src/operations.c:	if (a->lenght > 1)
./src/operations.c:		tmp = a->stack[0];
./src/operations.c:		a->stack[0] = a->stack[1];
./src/operations.c:		a->stack[1] = tmp;
./src/operations.c:		a->debug ? 0 : ft_printf("s%c\n", a->id);
./src/operations.c:	if (a->lenght > 0)
./src/operations.c:		if (!(a_new = (int*)ft_memalloc(sizeof(int) * --a->lenght)))
./src/operations.c:		while (++i < a->lenght + 1)
./src/operations.c:			a_new[i - 1] = a->stack[i];
./src/operations.c:		b_new[0] = a->stack[0];
./src/operations.c:		free(a->stack);
./src/operations.c:		a->stack = a_new;
./src/operations.c:		a->debug ? 0 : ft_printf("p%c\n", b->id);
./src/operations.c:	change = a->stack[0];
./src/operations.c:	while (i < a->LAST)
./src/operations.c:		a->stack[i] = a->stack[i + 1];
./src/operations.c:	a->stack[i] = change;
./src/operations.c:	a->debug ? 0 : ft_printf("r%c\n", a->id);
./src/operations.c:	i = a->LAST;
./src/operations.c:	change = a->stack[i];
./src/operations.c:		a->stack[i] = a->stack[i - 1];
./src/operations.c:	a->stack[i] = change;
./src/operations.c:	a->debug ? 0 : ft_printf("rr%c\n", a->id);
